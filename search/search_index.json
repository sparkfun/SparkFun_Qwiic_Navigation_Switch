{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"arduino_example/","title":"Arduino Examples","text":"<p>Now that we have our library and board add-on installed, we can start experimenting with the breakout board. For the scope of this tutorial, we will highlight the examples provided in the GitHub hardware repo to get started.</p>"},{"location":"arduino_example/#example-1-read-switches-write-leds","title":"Example 1: Read Switches, Write LEDs","text":"<p>From your downloads, open the example labeled as Example1-ReadButtons_WriteLEDs.ino. This example reads a switch and writes to the non-addressable LED using the PCA9554 I/O I<sup>2</sup>C Expander.</p> <p>For users using an Arduino microcontroller, select your board in the Tools menu (in our case the SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on.</p> <p>You can also copy or paste the code as shown below. Then click \"Upload\".</p> <pre><code>/*\n  Using the Qwiic Navigation Switch\n  By: Nathan Seidle\n  SparkFun Electronics\n  Date: October 8th, 2024\n\n  License: This code is public domain but you buy me a beer if you use this and we meet someday (Beerware license).\n\n  Feel like supporting our work? Buy a board from SparkFun!\n  https://www.sparkfun.com/products/27576 - Navigation Switch\n\n  This example demonstrates how to use pinMode and digitalRead/Write to read the Navigation Switch and turn\n  on/off the RGB LED channels.\n\n  Hardware Connections:\n  Plug the Qwiic board to your Arduino/ESP32 or other\n  Push the joystick-like switch toward a direction\n  Watch each LED turn on one-at-a-time\n*/\n\n#include &lt;SparkFun_I2C_Expander_Arduino_Library.h&gt; // Click here to get the library: http://librarymanager/All#SparkFun_I2C_Expander_Arduino_Library\n\nSFE_PCA95XX io; // Defaults to the PCA9554 at I2C address 0x20\n\nint buttonUp = 0;\nint buttonDown = 1;\nint buttonRight = 2;\nint buttonLeft = 3;\nint buttonCenter = 4;\nint ledBlue = 5;\nint ledGreen = 6;\nint ledRed = 7;\n\nvoid setup()\n{\n  Serial.begin(115200);\n  delay(250);\n  Serial.println(\"Qwiic Navigation Switch Example\");\n\n  Wire.begin();\n\n  // Initialize the PCA9554, default address = 0x20\n  if (io.begin() == false) //Device Address, Number of GPIO\n  {\n    Serial.println(\"PCA9554 not detected. Please check wiring. Freezing...\");\n    while (1)\n      ;\n  }\n\n  io.pinMode(buttonUp, INPUT);\n  io.pinMode(buttonDown, INPUT);\n  io.pinMode(buttonLeft, INPUT);\n  io.pinMode(buttonRight, INPUT);\n  io.pinMode(buttonCenter, INPUT);\n  io.pinMode(ledRed, OUTPUT);\n  io.pinMode(ledGreen, OUTPUT);\n  io.pinMode(ledBlue, OUTPUT);\n\n  redOff();\n  greenOff();\n  blueOff();\n\n  Serial.println(\"Qwiic Navigation Switch online!\");\n}\n\nvoid loop()\n{\n  Serial.print(\"Button: \");\n\n  if (io.digitalRead(buttonUp) == LOW)\n  {\n    Serial.print(\"Up\");\n    redOn();\n    greenOff();\n    blueOff();\n  }\n  else if (io.digitalRead(buttonDown) == LOW)\n  {\n    Serial.print(\"Down\");\n    redOff();\n    greenOn();\n    blueOff();\n  }\n  else if (io.digitalRead(buttonLeft) == LOW)\n  {\n    Serial.print(\"Left\");\n    redOn();\n    greenOff();\n    blueOn();\n  }\n  else if (io.digitalRead(buttonRight) == LOW)\n  {\n    Serial.print(\"Right\");\n    redOff();\n    greenOn();\n    blueOn();\n  }\n  else if (io.digitalRead(buttonCenter) == LOW)\n  {\n    Serial.print(\"Center\");\n    redOn();\n    greenOn();\n    blueOn();\n  }\n  else\n  {\n    Serial.print(\" None\");\n    redOff();\n    greenOff();\n    blueOff();\n  }\n  Serial.println();\n\n  delay(100);\n}\n\nvoid redOn()\n{\n  io.digitalWrite(ledRed, LOW);\n}\nvoid redOff()\n{\n  io.digitalWrite(ledRed, HIGH);\n}\nvoid greenOn()\n{\n  io.digitalWrite(ledGreen, LOW);\n}\nvoid greenOff()\n{\n  io.digitalWrite(ledGreen, HIGH);\n}\nvoid blueOn()\n{\n  io.digitalWrite(ledBlue, LOW);\n}\nvoid blueOff()\n{\n  io.digitalWrite(ledBlue, HIGH);\n}\n</code></pre> <p>After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200. Push the tactile switch toward a direction. You will notice a serial output indicating which switch was pushed in the Arduino Serial Monitor. Looking to the board, you will notice the LED changing color with respect to the switch being pushed.</p> Arduino Example 1 Serial Output"},{"location":"arduino_example/#example-2-interrupt-pin","title":"Example 2: Interrupt Pin","text":"<p>Note</p> <p>Example 3 from the SparkFun I2C Expander Arduino Library uses the IoT RedBoard - ESP32's pin <code>14</code> for the interrupt. The example in this tutorial is slightly different and uses pin <code>4</code> for the interrupt.</p> <p>From your downloads, open the example labeled as Example2_InterruptReadButtons_WriteLEDs.ino. This example reads a switch and writes to the non-addressable LED whenever there is an interrupt using the PCA9554 I/O I<sup>2</sup>C Expander. Make sure to connect the Qwiic Navigation Switch's interrupt pin to the IoT RedBoard's pin <code>4</code>.</p> <p>For users using an Arduino microcontroller, select your board in the Tools menu (in our case the SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on.</p> <p>You can also copy or paste the code as shown below. Then click \"Upload\".</p> <pre><code>/*\n  Using the PCA9554 with Interrupts\n  Modified by: Ho Yun \"Bobby\" Chan\n  Orignally Written By: Nathan Seidle\n  SparkFun Electronics\n  Date: December 3rd, 2024\n\n  License: This code is public domain but you buy me a beer if you use this and we meet someday (Beerware license).\n\n  Feel like supporting our work? Buy a board from SparkFun!\n  https://www.sparkfun.com/products/17047 - Qwiic GPIO\n  https://www.sparkfun.com/products/26784 - Qwiic Power Switch\n  https://www.sparkfun.com/products/26851 - Qwiic Directional Pad\n  https://www.sparkfun.com/products/27576 - Qwiic Navigation Switch\n\n  This example demonstrates how to use interrupts to check for new pin changes on the Qwiic Navigation Switch\n  and turn on/off the RGB LED channels\n\n  Hardware Connections:\n  Plug the Qwiic Navigation Switch into a Qwiic enabled board (SparkFun Thing Plus C, RedBoard, RedBoard IoT, etc)\n  If you don't have a platform with a Qwiic connection use the SparkFun Qwiic Breadboard Jumper (https://www.sparkfun.com/products/17912)\n  Connect a wire from a GPIO pin that is interrupt capable to the !INT pin on the Qwiic Navigation Switch\n  Open the serial monitor at 115200 baud to see the output.\n*/\n\n#include &lt;SparkFun_I2C_Expander_Arduino_Library.h&gt;  // Click here to get the library: http://librarymanager/All#SparkFun_I2C_Expander_Arduino_Library\n\n//SFE_PCA95XX io(PCA95XX_PCA9534); // Create a PCA9534 - Has interrupt pin\n//SFE_PCA95XX io(PCA95XX_PCA9536); // Create a PCA9536 - Has optional interrupt pin\n//SFE_PCA95XX io(PCA95XX_PCA9537); // Create a PCA9537 - Has interrupt pin\nSFE_PCA95XX io(PCA95XX_PCA9554);  // Create a PCA9554 - Has interrupt pin\n//SFE_PCA95XX io(PCA95XX_PCA9556); // Create a PCA9556 - No interrupt pin / Not compatible with this code\n//SFE_PCA95XX io(PCA95XX_PCA9557); // Create a PCA9557 - No interrupt pin / Not compatible with this code\n\nint buttonUp = 0;\nint buttonDown = 1;\nint buttonRight = 2;\nint buttonLeft = 3;\nint buttonCenter = 4;\nint ledBlue = 5;\nint ledGreen = 6;\nint ledRed = 7;\n\nint gpioExpander_interrupt = 4;  //INT of PCA9554 is connected to ESP pin 4. Goes low when an input pin changes.\n\nbool buttonPressed = false;\n\n//Interrupt that is called when INT pin goes low\nvoid IRAM_ATTR gpioExpanderISR() {\n  buttonPressed = true;\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  delay(250);\n  Serial.println(\"Qwiic Navigation Switch Example\");\n\n  Wire.begin();\n\n  // Initialize the PCA95xx with its default I2C address\n  if (io.begin() == false) {\n    Serial.println(\"PCA9554 not detected. Please check wiring. Freezing...\");\n    while (1)\n      ;\n  }\n  pinMode(gpioExpander_interrupt, INPUT_PULLUP);\n\n  io.pinMode(buttonUp, INPUT);\n  io.pinMode(buttonDown, INPUT);\n  io.pinMode(buttonLeft, INPUT);\n  io.pinMode(buttonRight, INPUT);\n  io.pinMode(buttonCenter, INPUT);\n  io.pinMode(ledRed, OUTPUT);\n  io.pinMode(ledGreen, OUTPUT);\n  io.pinMode(ledBlue, OUTPUT);\n\n  redOff();\n  greenOff();\n  blueOff();\n\n  Serial.println(\"Qwiic Navigation Switch online!\");\n\n  attachInterrupt(gpioExpander_interrupt, gpioExpanderISR, CHANGE);\n}\n\nvoid loop() {\n  //Wait for interrupt to fire\n  if (buttonPressed == true) {\n    Serial.println(\"Interrupt! \");\n    //Get all the pins in one read to save time\n    uint8_t currentState = io.getInputRegister();\n    // Pins are pulled high so when we see low, button is being pressed\n    if ((currentState &amp; (1 &lt;&lt; buttonUp)) == 0) {\n      Serial.println(\"Up\");\n\n      //RED\n      redOn();\n      greenOff();\n      blueOff();\n    } else if ((currentState &amp; (1 &lt;&lt; buttonDown)) == 0) {\n      Serial.println(\"Down\");\n\n      //GREEN\n      redOff();\n      greenOn();\n      blueOff();\n    } else if ((currentState &amp; (1 &lt;&lt; buttonLeft)) == 0) {\n      Serial.println(\"Left\");\n\n      //MAGENTA\n      redOn();\n      greenOff();\n      blueOn();\n    } else if ((currentState &amp; (1 &lt;&lt; buttonRight)) == 0) {\n      Serial.println(\"Right\");\n\n      //CYAN\n      redOff();\n      greenOn();\n      blueOn();\n    } else if ((currentState &amp; (1 &lt;&lt; buttonCenter)) == 0) {\n      Serial.println(\"Center\");\n\n      //WHITE\n      redOn();\n      greenOn();\n      blueOn();\n    } else {\n      Serial.println(\" None\");\n\n      //OFF\n      redOff();\n      greenOff();\n      blueOff();\n    }\n\n    buttonPressed = false;\n  }\n}\n\n\n\nvoid redOn() {\n  io.digitalWrite(ledRed, LOW);\n}\nvoid redOff() {\n  io.digitalWrite(ledRed, HIGH);\n}\nvoid greenOn() {\n  io.digitalWrite(ledGreen, LOW);\n}\nvoid greenOff() {\n  io.digitalWrite(ledGreen, HIGH);\n}\nvoid blueOn() {\n  io.digitalWrite(ledBlue, LOW);\n}\nvoid blueOff() {\n  io.digitalWrite(ledBlue, HIGH);\n}\n</code></pre> <p>After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200. Push the tactile switch toward a direction. You will notice a serial output indicating which direction the switch was pushed toward in the Arduino Serial Monitor. Looking to the board, you will notice the LED changing color with respect to the switch being pushed.</p> Arduino Example 2 Serial Output"},{"location":"arduino_library/","title":"Setting Up Arduino","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> <li>Installing Board Definitions in the Arduino IDE</li> </ul> <p>Note</p> <p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <ul> <li>How to Install CH340 Drivers</li> </ul> <p>SparkFun has written basic examples for the Qwiic Navigation Switch and is provided in the GitHub Hardware repository.</p> SparkFun Qwiic Navigation Switch Examples <p>You will need the SparkFun I2C Expander Arduino Library to work with the Qwiic Navigation Switch's basic examples. You can obtain this library through the Arduino Library Manager by searching for \"SparkFun I2C Expander Arduino Library\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun Qwiic I2C Expander Arduino Library (ZIP)"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_hookup/","title":"Hardware Hookup","text":"<p>In this section, we will go over how to connect to the Qwiic Navigation Switch.</p>"},{"location":"hardware_hookup/#connecting-via-qwiic","title":"Connecting Via Qwiic","text":"<p>Insert a Qwiic cable between your Arduino microcontroller and the Qwiic Navigation Switch. In this case, we used the SparkFun IoT RedBoard - ESP32 Development Board for the Arduino microcontroller. When ready, connect a USB cable to the Arduino to program, power, and view serial messages.</p> IoT RedBoard - ESP32 and Qwiic Navigation Switch Connected via Qwiic"},{"location":"hardware_hookup/#connecting-via-pth","title":"Connecting via PTH","text":"<p>For temporary connections to the PTHs, you could use IC hooks to test out the pins. However, you'll need to solder headers or wires of your choice to the board for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul>"},{"location":"hardware_hookup/#interrupt","title":"Interrupt","text":"<p>For users that want to notify the microcontroller that the switch is pushed toward a direction, you could connect the INT pin to one of the Arduino's interrupts. In this case, we connected the Navigation Switch's INT pin to the IoT RedBoard's pin 4.</p> IoT RedBoard - ESP32 and Qwiic Navigation Switch Connected via Qwiic and Interrupt Pin <p>Note</p> <p>Example 3 from the SparkFun I2C Expander Arduino Library uses the IoT RedBoard - ESP32's pin <code>14</code> for the interrupt. The example in this tutorial is slightly different and uses pin <code>4</code> for the interrupt.</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun Qwiic Navigation Switch. For more information, check out our Resources and Going Further on the components used on the breakout board.</p> Top View Bottom View"},{"location":"hardware_overview/#power","title":"Power","text":"<p>To power the board, you will need 3.3V. You can connect a Qwiic cable to the Qwiic connector on either side of the board or you can solder directly to the PTHs. Below are the power pins that are broken out on the edge of the board.</p> <ul> <li>3V3 \u2014 This pin is the voltage input for the board. The recommended input voltage for this pin is 3.3V.</li> <li>GND \u2014 Of course, is the common, ground voltage (0V reference) for the system.</li> </ul> Power and Ground Highlighted - Top View Power, Ground, and Qwiic Connector Highlighted - Bottom View"},{"location":"hardware_overview/#5-way-tactile-switch","title":"5-Way Tactile Switch","text":"<p>A small 5-way tactile switch is populated on the top side of the board and allows for a joystick-like interface in a very small package! Each direction includes a momentary switch that is read by the PCA9554 8-bit I<sup>2</sup>C I/O expander that is populated on the bottom of the board.</p> 5-Way Tactile Switch Highlighted - Top View"},{"location":"hardware_overview/#pca9554-8-bit-i2c-io-expander","title":"PCA9554 8-bit I<sup>2</sup>C I/O Expander","text":"<p>The TI PCA9554 that is populated on the bottom side of the board is an 8-bit I<sup>2</sup>C I/O expander that enables users to read and write to the following GPIO pins through I<sup>2</sup>C. It is used to read the 5-way tactile switch or write to the non-addressable RGB LED. The I<sup>2</sup>C address of the PCA9554 is set to 0x20 by default. By adjusting the jumpers on the back of the board, the alternative address can be set to any value between 0x21 to 0x27.</p> <ul> <li>GPIO0 \u2014 GPIO0 is connected to the 5-way Navigation Switch's UP switch. A 10k\u03a9 pull-up resistor is connected.</li> <li>GPIO1 \u2014 GPIO1 is connected to the 5-way Navigation Switch's DOWN switch. A 10k\u03a9 pull-up resistor is connected.</li> <li>GPIO2 \u2014 GPIO3 is connected to the 5-way Navigation Switch's RIGHT switch. A 10k\u03a9 pull-up resistor is connected.</li> <li>GPIO3 \u2014 GPIO4 is connected to the 5-way Navigation Switch's LEFT switch. A 10k\u03a9 pull-up resistor is connected.</li> <li>GPIO4 \u2014 GPIO4 is connected to the 5-way Navigation Switch's CENTER switch. A 10k\u03a9 pull-up resistor is connected.</li> <li>GPIO5 \u2014 GPIO5 is connected to the blue LED. The LED can be disconnected if users decide to use a different input to the GPIO5's PTH.</li> <li>GPIO6 \u2014 GPIO6 is connected to the green LED. The LED can be disconnected if users decide to use a different input to the GPIO6's PTH.</li> <li>GPIO7 \u2014 GPIO7 is connected to the red LED. The LED can be disconnected if users decide to use a different input to the GPIO7's PTH.</li> </ul> PCA9554 and Some GPIO Pins HighlightedTop and Bottom View"},{"location":"hardware_overview/#qwiic-and-i2c","title":"Qwiic and I<sup>2</sup>C","text":"<p>The board includes two horizontal Qwiic connectors to connect to other Qwiic-enabled I<sup>2</sup>C devices. However, the board still breaks out 0.1\"-spaced pins for users who prefer a soldered connection.</p> <ul> <li>SCL \u2014 I<sup>2</sup>C clock on the PCA9554.</li> <li>SDA \u2014 I<sup>2</sup>C data on the PCA9554.</li> </ul> Qwiic Connector, I<sup>2</sup>C, and PCA9554 Highlighted - Bottom View I<sup>2</sup>C Highlighted - Top View <p>As explained in the previous section, the I<sup>2</sup>C address of the PCA9554 is set to 0x20 by default. By adjusting the jumpers on the back of the board, the alternative address can be any value between 0x21 to 0x27. Make sure to check the Jumpers section below for more information.</p>"},{"location":"hardware_overview/#interrupt","title":"Interrupt","text":"<p>The interrupt pin labeled as INT is for users that want to notify a microcontroller that there is a switch being pushed on the 5-way tactile switch. This pin is active low.</p> Interrupt Highlighted - Top and Bottom View"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>The board includes two LEDs on the top and bottom of the board. Both can be disabled with the jumpers on the back of the board.</p> <ul> <li>PWR \u2014 On the bottom side of the board, the power LED indicates when power is available on 3.3V.</li> <li>STAT \u2014 The status LED is a non-addressable RGB LED that is used to indicate which switch is being pushed on the 5-way tactile switch. While this is populated on the bottom of the board, it will light up through the hole toward the top side of the board. Each channel can be disabled with the jumper on the back for users that want to connect them to some other input. Note that two colors were not used since there were only 5 switches available on the tactile switch.</li> </ul> Switch Direction              Color              Red(GPIO7)              Green(GPIO6)              Blue(GPIO5)              Up              Red              1              0              0              Down              Green              0              1              0              Left              Magenta              1              0              1              Right              Cyan              0              1              1              Center              White              1              1              1              No Switch Push OFF              0              0              0              Not Assigned Blue              0              0              1              Not Assigned Yellow              1              1              0              LEDs Highlighted Top and Bottom View"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>The back of the board includes jumpers to configure the board.</p> <ul> <li>PWR \u2014 By default, the power jumper connects the LED to the output's 3.3V pin. Cutting this trace disables the LED.</li> <li>7 \u2014 By default, this jumper is closed. Cutting this jumper will disconnect GPIO7 and the red channel from the RGB LED. Once disabled, GPIO7 is available for users that want to connect them to some other input/output.</li> <li>6 \u2014 By default, this jumper is closed. Cutting this jumper will disconnect GPIO6 and the green channel from the RGB LED. Once disabled, GPIO6 is available for users that want to connect them to some other input/output.</li> <li>5 \u2014 By default, this jumper is closed. Cutting this jumper will disconnect GPIO5 and the blue channel from the RGB LED. Once disabled, GPIO5 is available for users that want to connect them to some other input/output.</li> <li>I<sup>2</sup>C \u2014 By default, this three-pad jumper is closed. The three way jumper labeled I<sup>2</sup>C connects 3.3V to two 2.2k\u03a9 pull-up resistors and to the I<sup>2</sup>C data and clock lines. If multiple devices are connected to the bus with the pull-up resistors enabled, the parallel equivalent resistance will create too strong of a pull-up for the bus to operate correctly. As a general rule of thumb, disable all but one pair of pull-up resistors if multiple devices are connected to the bus.</li> <li>ADR  \u2014 By default, the three jumpers 0, 1, and 2 are open. These set the I<sup>2</sup>C address of the Qwiic Navigation Switch. Adding a solder blob will close the jumper and set the jumper as a <code>1</code>. Below shows the table needed to configure the three jumpers to achieve the desired I<sup>2</sup>C address.</li> </ul> I<sup>2</sup>C Address              ADR2 (Jumper 2)              ADR1 (Jumper 1)              ADR0(Jumper 0)              0x20              0              0              0              0x21              0              0              1              0x22              0              1              0              0x23              0              1              1              0x24              1              0              0              0x25              1              0              1              0x26              1              1              0              0x27              1              1              1              Jumpers HighlightedBottom View"},{"location":"hardware_overview/#3d-model","title":"3D Model","text":"<p>A 3D model of the board and components was exported to a STEP file using KiCad.</p> <p> </p> Click Here for the STEP File"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 1.0\" x 1.0\" (25.4mm x 25.4mm). There are 4x mounting holes. You can use 4-40 standoffs to mount the board to a panel or enclosure.</p> Board Dimensions"},{"location":"introduction/","title":"Introduction","text":"<p>The SparkFun Qwiic Navigation Switch adds a small, joystick-like 5-way tactile switch to your I<sup>2</sup>C bus! When connected to a microcontroller, push the 5-way tactile switch toward a direction (up, down, left, right, or center) to provide additional input for your application. The built-in RGB status LED provides visual feedback indicating when a switch is pushed.</p> <ul> <li> <p> </p> <p> SparkFun Qwiic Navigation Switch    PRT-27576    Purchase from SparkFun  </p> </li> </ul> <p>In this tutorial, we'll go over the hardware and how to hookup the SparkFun Qwiic Navigation Switch to an Arduino. We will also go over some Arduino examples to get started.</p>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 2m    CAB-15424 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board    WRL-19177 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Navigation Switch    PRT-27576 </p> </li> </ul> <ul> <li> <p> </p> <p> Qwiic Cable - 100mm    PRT-14427 </p> </li> </ul>"},{"location":"introduction/#qwiic-cables","title":"Qwiic Cables","text":"<p>For those that want to take advantage of the Qwiic connector, you'll want to grab a Qwiic cable. There are a variety of other cable lengths available in the SparkFun catalog to choose from.</p> <ul> <li> <p> </p> <p> SparkFun Qwiic Cable Kit    KIT-15081 </p> </li> </ul> <ul> <li> <p> </p> <p> Qwiic Cable - 100mm    PRT-14427 </p> </li> </ul> <ul> <li> <p> </p> <p> Qwiic Cable - 500mm    PRT-14429 </p> </li> </ul> <ul> <li> <p> </p> <p> Qwiic Cable - Breadboard Jumper (4-pin)    PRT-14425 </p> </li> </ul>"},{"location":"introduction/#tools-optional","title":"Tools (Optional)","text":"<p>For users connecting to the plated through holes, you will need a soldering iron, solder, and general soldering accessories.</p> <ul> <li> <p> </p> <p> PINECIL Soldering Iron Kit    TOL-24063 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Strippers - 30AWG (Hakko)    TOL-12630 </p> </li> </ul> <ul> <li> <p> </p> <p> Flush Cutters - Hakko    TOL-11952 </p> </li> </ul> <ul> <li> <p> </p> <p> Digital Multimeter - Basic    TOL-12966 </p> </li> </ul>"},{"location":"introduction/#prototyping-accessories-optional","title":"Prototyping Accessories  (Optional)","text":"<p>Depending on your setup, you may want to use IC hooks for a temporary connection. However, you will want to solder header pins to connect devices to the plated through holes for a secure connection.</p> <ul> <li> <p> </p> <p> Breadboard - Self-Adhesive (White)    PRT-12002 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <ul> <li> <p> </p> <p> Break Away Male Headers - Right Angle    PRT-00553 </p> </li> </ul> <ul> <li> <p> </p> <p> Female Headers    PRT-00115 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/F Pack of 10    PRT-09140 </p> </li> </ul>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic Connection System, we recommend reading here for an overview.</p> Qwiic Connection System <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> Installing Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> IoT RedBoard ESP32 Development Board Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Board Definitions in the Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> How to Install CH340 Drivers </p> </li> </ul> <ul> <li> <p> </p> <p> Processor Interrupts with Arduino </p> </li> </ul> <ul> <li> <p> </p> <p> Logic Levels </p> </li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>Now that you've successfully got your SparkFun Qwiic Navigation Switch up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>Schematic (PDF)</li> <li>KiCad Files (ZIP)</li> <li>3D Model (STEP)</li> <li>Board Dimensions (PNG)</li> <li>Component Datasheets<ul> <li>SF303GJ26 5-Way Tactile Switch</li> <li>PCA9554</li> </ul> </li> <li>Arduino Library</li> <li>Arduino Example Code</li> <li>GitHub Hardware Repo</li> </ul> <p>Or check out the Qwiic Directional Pad, Qwiic Button, or Qwiic Joystick for more ideas!</p> <ul> <li> <p> </p> <p> SparkFun Qwiic Directional Pad Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Button Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Qwiic Joystick Hookup Guide </p> </li> </ul>"},{"location":"single_page/","title":"Introduction","text":"<p>The SparkFun Qwiic Navigation Switch adds a small, joystick-like 5-way tactile switch to your I<sup>2</sup>C bus! When connected to a microcontroller, push the 5-way tactile switch toward a direction (up, down, left, right, or center) to provide additional input for your application. The built-in RGB status LED provides visual feedback indicating when a switch is pushed.</p> <ul> <li> <p> </p> <p> SparkFun Qwiic Navigation Switch    PRT-27576    Purchase from SparkFun  </p> </li> </ul> <p>In this tutorial, we'll go over the hardware and how to hookup the SparkFun Qwiic Navigation Switch to an Arduino. We will also go over some Arduino examples to get started.</p>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li> <p> </p> <p> Reversible USB A to C Cable - 2m    CAB-15424 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board    WRL-19177 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Navigation Switch    PRT-27576 </p> </li> </ul> <ul> <li> <p> </p> <p> Qwiic Cable - 100mm    PRT-14427 </p> </li> </ul>"},{"location":"single_page/#qwiic-cables","title":"Qwiic Cables","text":"<p>For those that want to take advantage of the Qwiic connector, you'll want to grab a Qwiic cable. There are a variety of other cable lengths available in the SparkFun catalog to choose from.</p> <ul> <li> <p> </p> <p> SparkFun Qwiic Cable Kit    KIT-15081 </p> </li> </ul> <ul> <li> <p> </p> <p> Qwiic Cable - 100mm    PRT-14427 </p> </li> </ul> <ul> <li> <p> </p> <p> Qwiic Cable - 500mm    PRT-14429 </p> </li> </ul> <ul> <li> <p> </p> <p> Qwiic Cable - Breadboard Jumper (4-pin)    PRT-14425 </p> </li> </ul>"},{"location":"single_page/#tools-optional","title":"Tools (Optional)","text":"<p>For users connecting to the plated through holes, you will need a soldering iron, solder, and general soldering accessories.</p> <ul> <li> <p> </p> <p> PINECIL Soldering Iron Kit    TOL-24063 </p> </li> </ul> <ul> <li> <p> </p> <p> Solder Lead Free - 15-gram Tube    TOL-09163 </p> </li> </ul> <ul> <li> <p> </p> <p> Hook-Up Wire - Assortment (Stranded, 22 AWG)    PRT-11375 </p> </li> </ul> <ul> <li> <p> </p> <p> Wire Strippers - 30AWG (Hakko)    TOL-12630 </p> </li> </ul> <ul> <li> <p> </p> <p> Flush Cutters - Hakko    TOL-11952 </p> </li> </ul> <ul> <li> <p> </p> <p> Digital Multimeter - Basic    TOL-12966 </p> </li> </ul>"},{"location":"single_page/#prototyping-accessories-optional","title":"Prototyping Accessories  (Optional)","text":"<p>Depending on your setup, you may want to use IC hooks for a temporary connection. However, you will want to solder header pins to connect devices to the plated through holes for a secure connection.</p> <ul> <li> <p> </p> <p> Breadboard - Self-Adhesive (White)    PRT-12002 </p> </li> </ul> <ul> <li> <p> </p> <p> IC Hook with Pigtail    CAB-09741 </p> </li> </ul> <ul> <li> <p> </p> <p> Break Away Male Headers - Right Angle    PRT-00553 </p> </li> </ul> <ul> <li> <p> </p> <p> Female Headers    PRT-00115 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/M Pack of 10    PRT-08431 </p> </li> </ul> <ul> <li> <p> </p> <p> Jumper Wires Premium 6\" M/F Pack of 10    PRT-09140 </p> </li> </ul>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren't familiar with the Qwiic Connection System, we recommend reading here for an overview.</p> Qwiic Connection System <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> Installing Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> IoT RedBoard ESP32 Development Board Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Installing Board Definitions in the Arduino IDE </p> </li> </ul> <ul> <li> <p> </p> <p> How to Install CH340 Drivers </p> </li> </ul> <ul> <li> <p> </p> <p> Processor Interrupts with Arduino </p> </li> </ul> <ul> <li> <p> </p> <p> Logic Levels </p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>In this section, we will highlight the hardware and pins that are broken out on the SparkFun Qwiic Navigation Switch. For more information, check out our Resources and Going Further on the components used on the breakout board.</p> Top View Bottom View"},{"location":"single_page/#power","title":"Power","text":"<p>To power the board, you will need 3.3V. You can connect a Qwiic cable to the Qwiic connector on either side of the board or you can solder directly to the PTHs. Below are the power pins that are broken out on the edge of the board.</p> <ul> <li>3V3 \u2014 This pin is the voltage input for the board. The recommended input voltage for this pin is 3.3V.</li> <li>GND \u2014 Of course, is the common, ground voltage (0V reference) for the system.</li> </ul> Power and Ground Highlighted - Top View Power, Ground, and Qwiic Connector Highlighted - Bottom View"},{"location":"single_page/#5-way-tactile-switch","title":"5-Way Tactile Switch","text":"<p>A small 5-way tactile switch is populated on the top side of the board and allows for a joystick-like interface in a very small package! Each direction includes a momentary switch that is read by the PCA9554 8-bit I<sup>2</sup>C I/O expander that is populated on the bottom of the board.</p> 5-Way Tactile Switch Highlighted - Top View"},{"location":"single_page/#pca9554-8-bit-i2c-io-expander","title":"PCA9554 8-bit I<sup>2</sup>C I/O Expander","text":"<p>The TI PCA9554 that is populated on the bottom side of the board is an 8-bit I<sup>2</sup>C I/O expander that enables users to read and write to the following GPIO pins through I<sup>2</sup>C. It is used to read the 5-way tactile switch or write to the non-addressable RGB LED. The I<sup>2</sup>C address of the PCA9554 is set to 0x20 by default. By adjusting the jumpers on the back of the board, the alternative address can be set to any value between 0x21 to 0x27.</p> <ul> <li>GPIO0 \u2014 GPIO0 is connected to the 5-way Navigation Switch's UP switch. A 10k\u03a9 pull-up resistor is connected.</li> <li>GPIO1 \u2014 GPIO1 is connected to the 5-way Navigation Switch's DOWN switch. A 10k\u03a9 pull-up resistor is connected.</li> <li>GPIO2 \u2014 GPIO3 is connected to the 5-way Navigation Switch's RIGHT switch. A 10k\u03a9 pull-up resistor is connected.</li> <li>GPIO3 \u2014 GPIO4 is connected to the 5-way Navigation Switch's LEFT switch. A 10k\u03a9 pull-up resistor is connected.</li> <li>GPIO4 \u2014 GPIO4 is connected to the 5-way Navigation Switch's CENTER switch. A 10k\u03a9 pull-up resistor is connected.</li> <li>GPIO5 \u2014 GPIO5 is connected to the blue LED. The LED can be disconnected if users decide to use a different input to the GPIO5's PTH.</li> <li>GPIO6 \u2014 GPIO6 is connected to the green LED. The LED can be disconnected if users decide to use a different input to the GPIO6's PTH.</li> <li>GPIO7 \u2014 GPIO7 is connected to the red LED. The LED can be disconnected if users decide to use a different input to the GPIO7's PTH.</li> </ul> PCA9554 and Some GPIO Pins HighlightedTop and Bottom View"},{"location":"single_page/#qwiic-and-i2c","title":"Qwiic and I<sup>2</sup>C","text":"<p>The board includes two horizontal Qwiic connectors to connect to other Qwiic-enabled I<sup>2</sup>C devices. However, the board still breaks out 0.1\"-spaced pins for users who prefer a soldered connection.</p> <ul> <li>SCL \u2014 I<sup>2</sup>C clock on the PCA9554.</li> <li>SDA \u2014 I<sup>2</sup>C data on the PCA9554.</li> </ul> Qwiic Connector, I<sup>2</sup>C, and PCA9554 Highlighted - Bottom View I<sup>2</sup>C Highlighted - Top View <p>As explained in the previous section, the I<sup>2</sup>C address of the PCA9554 is set to 0x20 by default. By adjusting the jumpers on the back of the board, the alternative address can be any value between 0x21 to 0x27. Make sure to check the Jumpers section below for more information.</p>"},{"location":"single_page/#interrupt","title":"Interrupt","text":"<p>The interrupt pin labeled as INT is for users that want to notify a microcontroller that there is a switch being pushed on the 5-way tactile switch. This pin is active low.</p> Interrupt Highlighted - Top and Bottom View"},{"location":"single_page/#leds","title":"LEDs","text":"<p>The board includes two LEDs on the top and bottom of the board. Both can be disabled with the jumpers on the back of the board.</p> <ul> <li>PWR \u2014 On the bottom side of the board, the power LED indicates when power is available on 3.3V.</li> <li>STAT \u2014 The status LED is a non-addressable RGB LED that is used to indicate which switch is being pushed on the 5-way tactile switch. While this is populated on the bottom of the board, it will light up through the hole toward the top side of the board. Each channel can be disabled with the jumper on the back for users that want to connect them to some other input. Note that two colors were not used since there were only 5 switches available on the tactile switch.</li> </ul> Switch Direction              Color              Red(GPIO7)              Green(GPIO6)              Blue(GPIO5)              Up              Red              1              0              0              Down              Green              0              1              0              Left              Magenta              1              0              1              Right              Cyan              0              1              1              Center              White              1              1              1              No Switch Push OFF              0              0              0              Not Assigned Blue              0              0              1              Not Assigned Yellow              1              1              0              LEDs Highlighted Top and Bottom View"},{"location":"single_page/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>The back of the board includes jumpers to configure the board.</p> <ul> <li>PWR \u2014 By default, the power jumper connects the LED to the output's 3.3V pin. Cutting this trace disables the LED.</li> <li>7 \u2014 By default, this jumper is closed. Cutting this jumper will disconnect GPIO7 and the red channel from the RGB LED. Once disabled, GPIO7 is available for users that want to connect them to some other input/output.</li> <li>6 \u2014 By default, this jumper is closed. Cutting this jumper will disconnect GPIO6 and the green channel from the RGB LED. Once disabled, GPIO6 is available for users that want to connect them to some other input/output.</li> <li>5 \u2014 By default, this jumper is closed. Cutting this jumper will disconnect GPIO5 and the blue channel from the RGB LED. Once disabled, GPIO5 is available for users that want to connect them to some other input/output.</li> <li>I<sup>2</sup>C \u2014 By default, this three-pad jumper is closed. The three way jumper labeled I<sup>2</sup>C connects 3.3V to two 2.2k\u03a9 pull-up resistors and to the I<sup>2</sup>C data and clock lines. If multiple devices are connected to the bus with the pull-up resistors enabled, the parallel equivalent resistance will create too strong of a pull-up for the bus to operate correctly. As a general rule of thumb, disable all but one pair of pull-up resistors if multiple devices are connected to the bus.</li> <li>ADR  \u2014 By default, the three jumpers 0, 1, and 2 are open. These set the I<sup>2</sup>C address of the Qwiic Navigation Switch. Adding a solder blob will close the jumper and set the jumper as a <code>1</code>. Below shows the table needed to configure the three jumpers to achieve the desired I<sup>2</sup>C address.</li> </ul> I<sup>2</sup>C Address              ADR2 (Jumper 2)              ADR1 (Jumper 1)              ADR0(Jumper 0)              0x20              0              0              0              0x21              0              0              1              0x22              0              1              0              0x23              0              1              1              0x24              1              0              0              0x25              1              0              1              0x26              1              1              0              0x27              1              1              1              Jumpers HighlightedBottom View"},{"location":"single_page/#3d-model","title":"3D Model","text":"<p>A 3D model of the board and components was exported to a STEP file using KiCad.</p> <p> </p> Click Here for the STEP File"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The board is 1.0\" x 1.0\" (25.4mm x 25.4mm). There are 4x mounting holes. You can use 4-40 standoffs to mount the board to a panel or enclosure.</p> Board Dimensions"},{"location":"single_page/#hardware-hookup","title":"Hardware Hookup","text":"<p>In this section, we will go over how to connect to the Qwiic Navigation Switch.</p>"},{"location":"single_page/#connecting-via-qwiic","title":"Connecting Via Qwiic","text":"<p>Insert a Qwiic cable between your Arduino microcontroller and the Qwiic Navigation Switch. In this case, we used the SparkFun IoT RedBoard - ESP32 Development Board for the Arduino microcontroller. When ready, connect a USB cable to the Arduino to program, power, and view serial messages.</p> IoT RedBoard - ESP32 and Qwiic Navigation Switch Connected via Qwiic"},{"location":"single_page/#connecting-via-pth","title":"Connecting via PTH","text":"<p>For temporary connections to the PTHs, you could use IC hooks to test out the pins. However, you'll need to solder headers or wires of your choice to the board for a secure connection. You can choose between a combination of header pins and jumper wires, or stripping wire and soldering the wire directly to the board.</p> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> Working with Wire </p> </li> </ul>"},{"location":"single_page/#interrupt_1","title":"Interrupt","text":"<p>For users that want to notify the microcontroller that the switch is pushed toward a direction, you could connect the INT pin to one of the Arduino's interrupts. In this case, we connected the Navigation Switch's INT pin to the IoT RedBoard's pin 4.</p> IoT RedBoard - ESP32 and Qwiic Navigation Switch Connected via Qwiic and Interrupt Pin <p>Note</p> <p>Example 3 from the SparkFun I2C Expander Arduino Library uses the IoT RedBoard - ESP32's pin <code>14</code> for the interrupt. The example in this tutorial is slightly different and uses pin <code>4</code> for the interrupt.</p>"},{"location":"single_page/#setting-up-arduino","title":"Setting Up Arduino","text":"<p>Arduino</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE, library, or board add-on, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> <li>Installing Board Definitions in the Arduino IDE</li> </ul> <p>Note</p> <p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <ul> <li>How to Install CH340 Drivers</li> </ul> <p>SparkFun has written basic examples for the Qwiic Navigation Switch and is provided in the GitHub Hardware repository.</p> SparkFun Qwiic Navigation Switch Examples <p>You will need the SparkFun I2C Expander Arduino Library to work with the Qwiic Navigation Switch's basic examples. You can obtain this library through the Arduino Library Manager by searching for \"SparkFun I2C Expander Arduino Library\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun Qwiic I2C Expander Arduino Library (ZIP)"},{"location":"single_page/#arduino-examples","title":"Arduino Examples","text":"<p>Now that we have our library and board add-on installed, we can start experimenting with the breakout board. For the scope of this tutorial, we will highlight the examples provided in the GitHub hardware repo to get started.</p>"},{"location":"single_page/#example-1-read-switches-write-leds","title":"Example 1: Read Switches, Write LEDs","text":"<p>From your downloads, open the example labeled as Example1-ReadButtons_WriteLEDs.ino. This example reads a switch and writes to the non-addressable LED using the PCA9554 I/O I<sup>2</sup>C Expander.</p> <p>For users using an Arduino microcontroller, select your board in the Tools menu (in our case the SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on.</p> <p>You can also copy or paste the code as shown below. Then click \"Upload\".</p> <pre><code>/*\n  Using the Qwiic Navigation Switch\n  By: Nathan Seidle\n  SparkFun Electronics\n  Date: October 8th, 2024\n\n  License: This code is public domain but you buy me a beer if you use this and we meet someday (Beerware license).\n\n  Feel like supporting our work? Buy a board from SparkFun!\n  https://www.sparkfun.com/products/27576 - Navigation Switch\n\n  This example demonstrates how to use pinMode and digitalRead/Write to read the Navigation Switch and turn\n  on/off the RGB LED channels.\n\n  Hardware Connections:\n  Plug the Qwiic board to your Arduino/ESP32 or other\n  Push the joystick-like switch toward a direction\n  Watch each LED turn on one-at-a-time\n*/\n\n#include &lt;SparkFun_I2C_Expander_Arduino_Library.h&gt; // Click here to get the library: http://librarymanager/All#SparkFun_I2C_Expander_Arduino_Library\n\nSFE_PCA95XX io; // Defaults to the PCA9554 at I2C address 0x20\n\nint buttonUp = 0;\nint buttonDown = 1;\nint buttonRight = 2;\nint buttonLeft = 3;\nint buttonCenter = 4;\nint ledBlue = 5;\nint ledGreen = 6;\nint ledRed = 7;\n\nvoid setup()\n{\n  Serial.begin(115200);\n  delay(250);\n  Serial.println(\"Qwiic Navigation Switch Example\");\n\n  Wire.begin();\n\n  // Initialize the PCA9554, default address = 0x20\n  if (io.begin() == false) //Device Address, Number of GPIO\n  {\n    Serial.println(\"PCA9554 not detected. Please check wiring. Freezing...\");\n    while (1)\n      ;\n  }\n\n  io.pinMode(buttonUp, INPUT);\n  io.pinMode(buttonDown, INPUT);\n  io.pinMode(buttonLeft, INPUT);\n  io.pinMode(buttonRight, INPUT);\n  io.pinMode(buttonCenter, INPUT);\n  io.pinMode(ledRed, OUTPUT);\n  io.pinMode(ledGreen, OUTPUT);\n  io.pinMode(ledBlue, OUTPUT);\n\n  redOff();\n  greenOff();\n  blueOff();\n\n  Serial.println(\"Qwiic Navigation Switch online!\");\n}\n\nvoid loop()\n{\n  Serial.print(\"Button: \");\n\n  if (io.digitalRead(buttonUp) == LOW)\n  {\n    Serial.print(\"Up\");\n    redOn();\n    greenOff();\n    blueOff();\n  }\n  else if (io.digitalRead(buttonDown) == LOW)\n  {\n    Serial.print(\"Down\");\n    redOff();\n    greenOn();\n    blueOff();\n  }\n  else if (io.digitalRead(buttonLeft) == LOW)\n  {\n    Serial.print(\"Left\");\n    redOn();\n    greenOff();\n    blueOn();\n  }\n  else if (io.digitalRead(buttonRight) == LOW)\n  {\n    Serial.print(\"Right\");\n    redOff();\n    greenOn();\n    blueOn();\n  }\n  else if (io.digitalRead(buttonCenter) == LOW)\n  {\n    Serial.print(\"Center\");\n    redOn();\n    greenOn();\n    blueOn();\n  }\n  else\n  {\n    Serial.print(\" None\");\n    redOff();\n    greenOff();\n    blueOff();\n  }\n  Serial.println();\n\n  delay(100);\n}\n\nvoid redOn()\n{\n  io.digitalWrite(ledRed, LOW);\n}\nvoid redOff()\n{\n  io.digitalWrite(ledRed, HIGH);\n}\nvoid greenOn()\n{\n  io.digitalWrite(ledGreen, LOW);\n}\nvoid greenOff()\n{\n  io.digitalWrite(ledGreen, HIGH);\n}\nvoid blueOn()\n{\n  io.digitalWrite(ledBlue, LOW);\n}\nvoid blueOff()\n{\n  io.digitalWrite(ledBlue, HIGH);\n}\n</code></pre> <p>After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200. Push the tactile switch toward a direction. You will notice a serial output indicating which switch was pushed in the Arduino Serial Monitor. Looking to the board, you will notice the LED changing color with respect to the switch being pushed.</p> Arduino Example 1 Serial Output"},{"location":"single_page/#example-2-interrupt-pin","title":"Example 2: Interrupt Pin","text":"<p>Note</p> <p>Example 3 from the SparkFun I2C Expander Arduino Library uses the IoT RedBoard - ESP32's pin <code>14</code> for the interrupt. The example in this tutorial is slightly different and uses pin <code>4</code> for the interrupt.</p> <p>From your downloads, open the example labeled as Example2_InterruptReadButtons_WriteLEDs.ino. This example reads a switch and writes to the non-addressable LED whenever there is an interrupt using the PCA9554 I/O I<sup>2</sup>C Expander. Make sure to connect the Qwiic Navigation Switch's interrupt pin to the IoT RedBoard's pin <code>4</code>.</p> <p>For users using an Arduino microcontroller, select your board in the Tools menu (in our case the SparkFun ESP32 IoT RedBoard) and the correct Port it enumerated on.</p> <p>You can also copy or paste the code as shown below. Then click \"Upload\".</p> <pre><code>/*\n  Using the PCA9554 with Interrupts\n  Modified by: Ho Yun \"Bobby\" Chan\n  Orignally Written By: Nathan Seidle\n  SparkFun Electronics\n  Date: December 3rd, 2024\n\n  License: This code is public domain but you buy me a beer if you use this and we meet someday (Beerware license).\n\n  Feel like supporting our work? Buy a board from SparkFun!\n  https://www.sparkfun.com/products/17047 - Qwiic GPIO\n  https://www.sparkfun.com/products/26784 - Qwiic Power Switch\n  https://www.sparkfun.com/products/26851 - Qwiic Directional Pad\n  https://www.sparkfun.com/products/27576 - Qwiic Navigation Switch\n\n  This example demonstrates how to use interrupts to check for new pin changes on the Qwiic Navigation Switch\n  and turn on/off the RGB LED channels\n\n  Hardware Connections:\n  Plug the Qwiic Navigation Switch into a Qwiic enabled board (SparkFun Thing Plus C, RedBoard, RedBoard IoT, etc)\n  If you don't have a platform with a Qwiic connection use the SparkFun Qwiic Breadboard Jumper (https://www.sparkfun.com/products/17912)\n  Connect a wire from a GPIO pin that is interrupt capable to the !INT pin on the Qwiic Navigation Switch\n  Open the serial monitor at 115200 baud to see the output.\n*/\n\n#include &lt;SparkFun_I2C_Expander_Arduino_Library.h&gt;  // Click here to get the library: http://librarymanager/All#SparkFun_I2C_Expander_Arduino_Library\n\n//SFE_PCA95XX io(PCA95XX_PCA9534); // Create a PCA9534 - Has interrupt pin\n//SFE_PCA95XX io(PCA95XX_PCA9536); // Create a PCA9536 - Has optional interrupt pin\n//SFE_PCA95XX io(PCA95XX_PCA9537); // Create a PCA9537 - Has interrupt pin\nSFE_PCA95XX io(PCA95XX_PCA9554);  // Create a PCA9554 - Has interrupt pin\n//SFE_PCA95XX io(PCA95XX_PCA9556); // Create a PCA9556 - No interrupt pin / Not compatible with this code\n//SFE_PCA95XX io(PCA95XX_PCA9557); // Create a PCA9557 - No interrupt pin / Not compatible with this code\n\nint buttonUp = 0;\nint buttonDown = 1;\nint buttonRight = 2;\nint buttonLeft = 3;\nint buttonCenter = 4;\nint ledBlue = 5;\nint ledGreen = 6;\nint ledRed = 7;\n\nint gpioExpander_interrupt = 4;  //INT of PCA9554 is connected to ESP pin 4. Goes low when an input pin changes.\n\nbool buttonPressed = false;\n\n//Interrupt that is called when INT pin goes low\nvoid IRAM_ATTR gpioExpanderISR() {\n  buttonPressed = true;\n}\n\nvoid setup() {\n  Serial.begin(115200);\n  delay(250);\n  Serial.println(\"Qwiic Navigation Switch Example\");\n\n  Wire.begin();\n\n  // Initialize the PCA95xx with its default I2C address\n  if (io.begin() == false) {\n    Serial.println(\"PCA9554 not detected. Please check wiring. Freezing...\");\n    while (1)\n      ;\n  }\n  pinMode(gpioExpander_interrupt, INPUT_PULLUP);\n\n  io.pinMode(buttonUp, INPUT);\n  io.pinMode(buttonDown, INPUT);\n  io.pinMode(buttonLeft, INPUT);\n  io.pinMode(buttonRight, INPUT);\n  io.pinMode(buttonCenter, INPUT);\n  io.pinMode(ledRed, OUTPUT);\n  io.pinMode(ledGreen, OUTPUT);\n  io.pinMode(ledBlue, OUTPUT);\n\n  redOff();\n  greenOff();\n  blueOff();\n\n  Serial.println(\"Qwiic Navigation Switch online!\");\n\n  attachInterrupt(gpioExpander_interrupt, gpioExpanderISR, CHANGE);\n}\n\nvoid loop() {\n  //Wait for interrupt to fire\n  if (buttonPressed == true) {\n    Serial.println(\"Interrupt! \");\n    //Get all the pins in one read to save time\n    uint8_t currentState = io.getInputRegister();\n    // Pins are pulled high so when we see low, button is being pressed\n    if ((currentState &amp; (1 &lt;&lt; buttonUp)) == 0) {\n      Serial.println(\"Up\");\n\n      //RED\n      redOn();\n      greenOff();\n      blueOff();\n    } else if ((currentState &amp; (1 &lt;&lt; buttonDown)) == 0) {\n      Serial.println(\"Down\");\n\n      //GREEN\n      redOff();\n      greenOn();\n      blueOff();\n    } else if ((currentState &amp; (1 &lt;&lt; buttonLeft)) == 0) {\n      Serial.println(\"Left\");\n\n      //MAGENTA\n      redOn();\n      greenOff();\n      blueOn();\n    } else if ((currentState &amp; (1 &lt;&lt; buttonRight)) == 0) {\n      Serial.println(\"Right\");\n\n      //CYAN\n      redOff();\n      greenOn();\n      blueOn();\n    } else if ((currentState &amp; (1 &lt;&lt; buttonCenter)) == 0) {\n      Serial.println(\"Center\");\n\n      //WHITE\n      redOn();\n      greenOn();\n      blueOn();\n    } else {\n      Serial.println(\" None\");\n\n      //OFF\n      redOff();\n      greenOff();\n      blueOff();\n    }\n\n    buttonPressed = false;\n  }\n}\n\n\n\nvoid redOn() {\n  io.digitalWrite(ledRed, LOW);\n}\nvoid redOff() {\n  io.digitalWrite(ledRed, HIGH);\n}\nvoid greenOn() {\n  io.digitalWrite(ledGreen, LOW);\n}\nvoid greenOff() {\n  io.digitalWrite(ledGreen, HIGH);\n}\nvoid blueOn() {\n  io.digitalWrite(ledBlue, LOW);\n}\nvoid blueOff() {\n  io.digitalWrite(ledBlue, HIGH);\n}\n</code></pre> <p>After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200. Push the tactile switch toward a direction. You will notice a serial output indicating which direction the switch was pushed toward in the Arduino Serial Monitor. Looking to the board, you will notice the LED changing color with respect to the switch being pushed.</p> Arduino Example 2 Serial Output"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":""},{"location":"single_page/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a forum account to search product forums and post questions.</p> <p>Log Into SparkFun Forums</p>"},{"location":"single_page/#resources","title":"Resources","text":"<p>Now that you've successfully got your SparkFun Qwiic Navigation Switch up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>Schematic (PDF)</li> <li>KiCad Files (ZIP)</li> <li>3D Model (STEP)</li> <li>Board Dimensions (PNG)</li> <li>Component Datasheets<ul> <li>SF303GJ26 5-Way Tactile Switch</li> <li>PCA9554</li> </ul> </li> <li>Arduino Library</li> <li>Arduino Example Code</li> <li>GitHub Hardware Repo</li> </ul> <p>Or check out the Qwiic Directional Pad, Qwiic Button, or Qwiic Joystick for more ideas!</p> <ul> <li> <p> </p> <p> SparkFun Qwiic Directional Pad Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Qwiic Button Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Qwiic Joystick Hookup Guide </p> </li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a forum account to search product forums and post questions.</p> <p>Log Into SparkFun Forums</p>"},{"location":"assets/component_documentation/","title":"SparkFun Documentation","text":"<p>This directory should include any necessary datasheets, example number crunching, etc. </p>"},{"location":"github/contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Qwiic Navigation Switch repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Qwiic Navigation Switch repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Qwiic Navigation Switch repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Qwiic Navigation Switch repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"}]}